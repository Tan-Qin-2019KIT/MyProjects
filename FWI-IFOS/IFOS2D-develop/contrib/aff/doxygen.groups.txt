/*! \file libaff/doxygen.groups.txt
 * \brief groups in libaff
 *
 * ----------------------------------------------------------------------------
 *
 * $Id$
 * 
 * Copyright (c) 2011 by Thomas Forbriger (BFO)
 *
 * ----
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * ----
 * 
 * groups in code for C++ containers for numbers (libaff)
 * 
 * REVISIONS and CHANGES 
 *  - 15/05/2011   V1.0   Thomas Forbriger
 *  - 12/06/2013   V1.1   renamed file
 * 

  \todo
  Define more groups to cover the complete code
 * ============================================================================
 */

/*======================================================================*/

/*! \brief Basic array module
  \defgroup group_array Basic array module

  By including aff/array.h you will get access to the following modules:

  -# aff::Array is the main array interface (see example tests/arraytest.cc).
  -# aff::Strided is the shape of a strided Fortran array and defines the
                memory layout of aff::Array objects (see example
                tests/shapetest.cc).
  -# aff::SharedHeap is the representation used by aff::Array. It holds the
                data in memory and provides an interface to it. This interface
                may be passed separately from the array object (see also
                \ref page_representation and example tests/reprtest.cc).
  -# aff::SimpleRigidArray is a linear array with size fixed at compile-time.
                There are several inline functions defined for operations with
                this array class (see example tests/simplearraytest.cc).
  -# aff::Exception is the exception base class used in the library.
  -# aff::AllocException is the exception that indicated a failed memory
                allocation(see also \ref group_error).

  It additionally offers the following type definitions:

  -# aff::Tsubscript is the type of subscripts to arrays (positive and
                     negative).
  -# aff::Tsize      is the type of size values (non-negative).
  -# aff::Tdim       is the type of the dimension index (small, non-negative).

  Helpers are available in \ref group_array_extensions.

  \todo
  Place ingroup definitions in source code
  \todo
  Provide additional groups for Series and SimpleRigidArray
*/

/*----------------------------------------------------------------------*/

/*! \brief Extensions for array module
  \defgroup group_array_extensions Extensions for array module
  
  The library provides some additional modules. You need only include the
  header file of those modules that you really want to use in addition to the
  basic aff::Array functionality.
  These additional modules are:

  -# aff::Shaper presented in aff/shaper.h and used to pass Fortran layouts
                 to array constructors (see example tests/shapetest.cc).
  -# aff::Series presented in aff/series.h which is used to interface linear
                 sequences of data (like time series or Fourier coefficients).
  -# aff::Iterator presented in aff/iterator.h which is an iterator interface
                 to containers like aff::Array or aff::Series (see example
                 tests/helpertest.cc).
  -# aff::subarray presented in aff/subarray.h to conveniently create
                 subarrays from aff::Array objects (see example
                 tests/helpertest.cc).
  -# aff::slice presented in aff/slice.h to conveniently create
                 slices from aff::Array objects (see example
                 tests/helpertest.cc).
  -# aff::FortranArray and its associate aff::util::FortranShape are presented
                 in aff/fortranshape.h. They calculate a Fortran 77 array
                 layout (leading dimensions) from a given AFF array (see
                 example tests/f77test.cc).
  -# aff::dump and its associates, presented in aff/dump.h. They are used to 
                 dump shape or contents of containers and are thus useful when
                 debugging your code. See also \ref group_helpers.


  \sa \ref sec_design_namespaces
  \sa \ref sec_naming_files

  \todo
  Place ingroup definitions in source code
*/

/*----------------------------------------------------------------------*/

/*! \brief Series container
  \defgroup group_series Series container

  \sa \ref group_series_extensions

  \todo
  Place ingroup definitions in source code
*/

/*----------------------------------------------------------------------*/

/*! \brief Extensions for series module
  \defgroup group_series_extensions Extensions for series module

  \todo
  Place ingroup definitions in source code
*/

/*======================================================================*/

// ----- END OF doxygen.groups.txt ----- 
